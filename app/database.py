import os
from dotenv import load_dotenv
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, Session

# ðŸ”¹ Charger les variables d'environnement (utile en local avec .env)
load_dotenv()

# ðŸ”¹ RÃ©cupÃ©rer la variable DATABASE_URL
SQLALCHEMY_DATABASE_URL = os.getenv("DATABASE_URL")

# ðŸ”¸ Adapter l'URL pour SQLAlchemy si Render fournit "postgres://" (au lieu de "postgresql://")
if SQLALCHEMY_DATABASE_URL and SQLALCHEMY_DATABASE_URL.startswith("postgres://"):
    SQLALCHEMY_DATABASE_URL = SQLALCHEMY_DATABASE_URL.replace("postgres://", "postgresql://", 1)

# ðŸ”¹ CrÃ©er l'engine SQLAlchemy
engine = create_engine(SQLALCHEMY_DATABASE_URL)

# ðŸ”¹ CrÃ©er une session locale
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# ðŸ”¹ Base pour les classes ORM
Base = declarative_base()


# ðŸ”¸ CrÃ©er les tables Ã  partir des modÃ¨les dÃ©finis
def create_db_and_tables():
    from app import models  # importer ici pour Ã©viter les rÃ©fÃ©rences circulaires
    Base.metadata.create_all(bind=engine)


# ðŸ”¹ Fournir une session DB (utilisÃ© dans les dÃ©pendances FastAPI)
def get_db():
    db: Session = SessionLocal()
    try:
        yield db
    finally:
        db.close()
